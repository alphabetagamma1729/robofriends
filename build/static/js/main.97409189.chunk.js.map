{"version":3,"sources":["Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Cardlist","robots","Error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OA2BeA,EAxBE,SAAC,GAAa,EAAZC,OAEX,MAAM,IAAIC,MAAM,YCUTC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKC,UAAU,MAAf,SACI,uBACIA,UAAY,mCACZC,KAAK,SACLC,YAAY,gBACZC,SAAYJ,OCCbK,EARA,SAACC,GACZ,OACA,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCkBAC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,qDAOlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,2DAEJG,KAAKX,MAAMK,a,GAhBEQ,aCiDbC,G,wDAvCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACnB,YAAauB,EAAMC,OAAOC,SAbzC,EAAKX,MAAQ,CACTjB,OAAQ,GACRG,YAAa,IAJP,E,qDAQd,WAAoB,IAAD,OACf0B,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACtB,OAAQiC,S,oBAM9C,WAAU,IAAD,EACyBZ,KAAKJ,MAA5BjB,EADF,EACEA,OAAQG,EADV,EACUA,YACT+B,EAAiBlC,EAAOmC,QAAO,SAAAC,GAAK,OACrCA,EAAMC,KAAKC,cAAcC,SAASpC,EAAYmC,kBAGnD,OAAQtC,EAAOwC,OAGP,sBAAKnC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWD,aAAgBiB,KAAKI,iBAChC,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAUkC,WAPpC,+C,GAzBMX,cCCHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.97409189.chunk.js","sourcesContent":["import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({robots}) => {\n    if (true) {\n        throw new Error('NOOOOO!');\n    }\n    return (\n        <div>\n            {\n                robots.map((user,i) => {\n                    return (\n                        <Card\n                            key = {i}\n                            id = {robots[i].id}\n                            name = {robots[i].name}\n                            email = {robots[i].email}\n                        \n                        />\n                    )\n                }         \n                )\n            }\n        </div>\n    );\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className = 'pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder=\"search robots\"\n                onChange = {searchChange}/>    \n        </div>\n        \n    );\n}\n\nexport default SearchBox","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n        {props.children}\n    </div>\n    );\n};\n\nexport default Scroll;\n","import React, {Component} from 'react'\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if (this.state.hasError) {\n            return <h1> Oops, this is not good. </h1>\n        }\n        return this.props.children\n    }\n\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport Cardlist from '../Components/Cardlist'\n//import {robots} from '../Components/robots'\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundary'\nimport './App.css';\n\n//props are things that comes out of the state\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount(){\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response =>  response.json())\n            .then(users => this.setState({robots: users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n    render() {\n        const {robots, searchfield} = this.state\n        const filteredRobots = robots.filter(robot =>\n             robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        )\n        \n        return !robots.length ?\n            <h1> loading </h1> :\n            (\n                <div className='tc'>   \n                    <h1 className=\"f1\">RoboFriends</h1>\n                    <SearchBox searchChange = {this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary> \n                            <Cardlist robots = {filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}